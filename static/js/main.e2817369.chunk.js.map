{"version":3,"sources":["components/Bar.js","components/Form.js","algorithms/helpers.js","algorithms/bubbleSort.js","algorithms/mergeSort.js","algorithms/quickSort.js","App.js","index.js"],"names":["Bar","style","height","length","backgroundColor","color","className","Form","formLabel","values","labels","currentValue","onChange","FormControl","FormLabel","RadioGroup","value","map","index","FormControlLabel","key","control","Radio","label","swap","array","indexA","indexB","temp","insertStep","arrayNew","position","arraySteps","currentStep","slice","splice","push","bubbleSort","colorSteps","colorKey","i","j","Array","fill","merge","arrayA","arrayB","shift","concat","mergeSort","mid","quickSort","A","B","Math","floor","C","middleValue","sort","indexOf","pickPivot","pivot","bigIndex","max","App","state","timeouts","algorithm","barCount","delay","ALGO_SET","handleStart","steps","run","changeAlgorithm","event","clearTimeouts","clearColorKey","setState","target","changeDelay","parseInt","forEach","timeout","clearTimeout","generateBars","barsTemp","random","this","step","setTimeout","barsDiv","e","Button","variant","onClick","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2817369.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Bar.css\"\r\n\r\nfunction Bar({ length, color }) {\r\n  let style = {\r\n    height: length,\r\n    backgroundColor: color ? \"green\" : \"black\",\r\n  }\r\n\r\n  return (\r\n    <div className=\"bar\" style={style} ></div>\r\n  )\r\n}\r\n\r\nexport default Bar;","import React from 'react';\r\nimport { FormControl, FormControlLabel, FormLabel, Radio, RadioGroup } from '@material-ui/core';\r\n\r\nexport default function Form({ formLabel, values, labels, currentValue, onChange }) {\r\n  return (\r\n    <FormControl>\r\n      <FormLabel>{formLabel}</FormLabel>\r\n      <RadioGroup value={currentValue} onChange={onChange}>\r\n        {values.map((value, index) => {\r\n          return (<FormControlLabel\r\n            key={`${value}_${index}`}\r\n            value={values[index]}\r\n            control={<Radio />}\r\n            label={labels[index]} />);\r\n        })}\r\n      </RadioGroup>\r\n    </FormControl>\r\n  );\r\n}","\r\nexport function swap(array, indexA, indexB) {\r\n  let temp = array[indexA];\r\n  array[indexA] = array[indexB];\r\n  array[indexB] = temp;\r\n  return array;\r\n}\r\n\r\nexport function insertStep(arrayNew, position, arraySteps) {\r\n  let currentStep = arraySteps[arraySteps.length - 1].slice();\r\n  currentStep.splice(position, arrayNew.length, ...arrayNew);\r\n  arraySteps.push(currentStep);\r\n}","import { swap } from './helpers';\r\n\r\nconst bubbleSort = (array, position, arraySteps, colorSteps) => {\r\n  let colorKey = colorSteps[colorSteps.length - 1].slice();\r\n\r\n  for (let i = 0; i < array.length - 1; i++) {\r\n    for (let j = 0; j < array.length - i - 1; j++) {\r\n      if (array[j] > array[j + 1]) {\r\n        array = swap(array, j, j + 1);\r\n      }\r\n      arraySteps.push(array.slice());\r\n      colorSteps.push(colorKey.slice());\r\n\r\n    }\r\n    colorKey[array.length - 1 - i] = true;\r\n    arraySteps.push(array.slice());\r\n    colorSteps.push(colorKey.slice());\r\n  }\r\n\r\n  // Remaining bars become green\r\n  colorSteps[colorSteps.length - 1] = new Array(array.length).fill(true);\r\n  return;\r\n}\r\n\r\nexport default bubbleSort;","import { insertStep } from './helpers';\r\n\r\nfunction mergeSort(array, position, arraySteps, colorSteps) {\r\n  if (array.length === 1) return array;\r\n\r\n  let mid = array.length / 2;\r\n\r\n  let arrayA = mergeSort(array.slice(0, mid), position, arraySteps, colorSteps);\r\n  let arrayB = mergeSort(array.slice(mid), position + mid, arraySteps, colorSteps);\r\n\r\n  return merge(arrayA, arrayB, position, arraySteps, colorSteps);\r\n}\r\n\r\nconst merge = (arrayA, arrayB, position, arraySteps, colorSteps) => {\r\n  let arrayNew = [];\r\n  let A = 0;\r\n  let B = 0;\r\n\r\n  while (arrayA.length > 0 && arrayB.length > 0) {\r\n    if (arrayA[A] < arrayB[B]) {\r\n      arrayNew.push(arrayA.shift());\r\n      insertStep(arrayNew, position, arraySteps);\r\n    } else {\r\n      arrayNew.push(arrayB.shift());\r\n      insertStep(arrayNew, position, arraySteps);\r\n    }\r\n\r\n    if (position === 0) {\r\n      let colorKey = colorSteps[colorSteps.length - 1].slice();\r\n      colorKey[arrayNew.length - 1] = true;\r\n      colorSteps.push(colorKey);\r\n    } else {\r\n      colorSteps.push(colorSteps[colorSteps.length - 1].slice());\r\n    }\r\n  }\r\n\r\n  if (position === 0) {\r\n    let colorKey = colorSteps[colorSteps.length - 1].slice();\r\n    colorKey.fill(true, position + arrayNew.length, position + arrayNew.length + arrayA.length + arrayB.length);\r\n    colorSteps.push(colorKey);\r\n  } else {\r\n    colorSteps.push(colorSteps[colorSteps.length - 1].slice());\r\n  }\r\n\r\n  if (arrayA.length !== 0) arrayNew = arrayNew.concat(arrayA);\r\n  if (arrayB.length !== 0) arrayNew = arrayNew.concat(arrayB);\r\n\r\n  insertStep(arrayNew, position, arraySteps);\r\n\r\n  return arrayNew;\r\n}\r\n\r\nexport default mergeSort;","import { swap, insertStep } from './helpers';\r\n\r\nconst quickSort = (array, position, arraySteps, colorSteps) => {\r\n  if (array.length < 2) {\r\n    insertStep(array, position, arraySteps);\r\n\r\n    let colorKey = colorSteps[colorSteps.length - 1].slice();\r\n    colorKey[position] = true;\r\n    colorSteps.push(colorKey);\r\n    return;\r\n  }\r\n\r\n  // pick median of three numbers as pivot and sent it to back\r\n  swap(array, pickPivot(array), array.length - 1);\r\n  insertStep(array, position, arraySteps);\r\n  colorSteps.push(colorSteps[colorSteps.length - 1].slice());\r\n\r\n  let pivot = array[array.length - 1];\r\n  let A = 0;\r\n  let B = array.length - 1;\r\n\r\n  // swap small value from right with big value from left\r\n  while (A < B) {\r\n    while (array[A] < pivot) A++;\r\n    while (array[B] >= pivot) B--;\r\n    if (A < B) {\r\n      swap(array, A, B);\r\n      insertStep(array, position, arraySteps);\r\n      colorSteps.push(colorSteps[colorSteps.length - 1].slice());\r\n    }\r\n  }\r\n\r\n  // swap big value with pivot\r\n  let bigIndex = Math.max(A, B);\r\n\r\n  swap(array, bigIndex, array.length - 1);\r\n  insertStep(array, position, arraySteps);\r\n  let colorKey = colorSteps[colorSteps.length - 1].slice();\r\n  colorKey[position + bigIndex] = true;\r\n  colorSteps.push(colorKey);\r\n\r\n  // recurse on two halves\r\n  quickSort(array.slice(0, A), position, arraySteps, colorSteps);\r\n  quickSort(array.slice(A + 1), position + A + 1, arraySteps, colorSteps);\r\n\r\n  return;\r\n}\r\n\r\nfunction pickPivot(array) {\r\n  let A = array[0];\r\n  let B = array[Math.floor(array.length / 2)];\r\n  let C = array[array.length - 1];\r\n\r\n  let middleValue = [A, B, C].sort()[1];\r\n  let middleIndex = array.indexOf(middleValue);\r\n\r\n  return middleIndex;\r\n}\r\n\r\nexport default quickSort;","import React from 'react';\nimport { Button } from '@material-ui/core';\nimport Bar from './components/Bar';\nimport Form from './components/Form';\n\n// style\nimport './App.css';\n\n// algorithms\nimport bubbleSort from './algorithms/bubbleSort';\nimport mergeSort from './algorithms/mergeSort';\nimport quickSort from './algorithms/quickSort';\n\nclass App extends React.Component {\n  state = {\n    array: [],\n    timeouts: [],\n    algorithm: 'Bubble Sort',\n    barCount: 8,\n    delay: 128,\n    colorKey: [],\n  }\n\n  ALGO_SET = {\n    'Bubble Sort': bubbleSort,\n    'Merge Sort': mergeSort,\n    'Quick Sort': quickSort,\n  }\n\n  componentDidMount() {\n    this.generateBars(this.state.barCount);\n  }\n\n  handleStart = () => {\n    let array = this.state.array.slice();\n    let steps = [this.state.array.slice()];\n    let colorSteps = [this.state.colorKey.slice()];\n\n    this.ALGO_SET[this.state.algorithm](array, 0, steps, colorSteps);\n\n    this.run(steps, colorSteps);\n  }\n\n  run(steps, colorSteps) {\n    this.clearTimeouts();\n    let timeouts = [];\n\n    steps.map((step, i) => {\n      let timeout = setTimeout(() => {\n        this.setState({\n          array: step,\n          colorKey: colorSteps[i],\n        })\n      }, this.state.delay * i);\n      timeouts.push(timeout);\n    });\n\n    this.setState({\n      timeouts: timeouts,\n    });\n  }\n\n  changeAlgorithm = (event) => {\n    this.clearTimeouts();\n    this.clearColorKey();\n    this.setState({\n      algorithm: event.target.value,\n    });\n  };\n\n  changeDelay = (event) => {\n    this.clearTimeouts();\n    this.setState({\n      delay: parseInt(event.target.value),\n    });\n  };\n\n  clearTimeouts = () => {\n    this.state.timeouts.forEach(timeout => clearTimeout(timeout));\n  }\n\n  clearColorKey = () => {\n    this.setState({ colorKey: new Array(this.state.barCount).fill(false) });\n  }\n\n  generateBars = (barCount) => {\n    this.clearTimeouts();\n    this.clearColorKey();\n\n    barCount = parseInt(barCount);\n    let barsTemp = [];\n\n    for (let i = 0; i < barCount; i++) {\n      barsTemp.push(Math.floor(Math.random() * 90) + 10);\n    }\n\n    this.setState({\n      array: barsTemp,\n      barCount: barCount,\n    });\n  }\n\n  render() {\n    let barsDiv = this.state.array.map((value, index) => <Bar\n      key={index}\n      length={value}\n      color={this.state.colorKey[index]}\n    />);\n\n    return (\n      <div className=\"App\">\n        <Form\n          formLabel=\"Algorithm\"\n          values={['Bubble Sort', 'Merge Sort', 'Quick Sort']}\n          labels={['Bubble Sort', 'Merge Sort', 'Quick Sort']}\n          currentValue={this.state.algorithm}\n          onChange={this.changeAlgorithm}\n        />\n\n        <Form\n          formLabel=\"Array size\"\n          values={[8, 16, 32]}\n          labels={['8 items', '16 items', '32 items']}\n          currentValue={this.state.barCount}\n          onChange={e => this.generateBars(e.target.value)}\n        />\n\n        <Form\n          formLabel=\"Speed\"\n          values={[128, 64, 32]}\n          labels={['1x', '2x', '4x']}\n          currentValue={this.state.delay}\n          onChange={this.changeDelay}\n        />\n\n        <div>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => this.generateBars(this.state.barCount)}\n          >Reset</Button>\n\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => this.handleStart()}\n          >Start</Button>\n        </div>\n        <div className=\"container\">\n          {barsDiv}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}