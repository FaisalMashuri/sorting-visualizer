{"version":3,"sources":["components/Bar.js","App.js","index.js"],"names":["Bar","props","style","length","className","height","swap","array","indexA","indexB","temp","App","state","algorithm","handleStart","bubbleSort","setState","mergeSortRecursive","quickSort","handleSwap","handleChange","event","target","value","generateBars","barsTemp","i","push","Math","floor","random","console","log","counter","this","recursionTest","setTimeout","depth","m","r","newArray","arrayA","slice","arrayB","mergeSort","merge","arrayNew","shift","concat","middle","A","B","barsDiv","map","index","key","FormControl","RadioGroup","aria-label","name","onChange","FormControlLabel","control","Radio","label","Button","variant","color","onClick","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4eb93ec2.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Bar.css\"\r\n\r\nfunction Bar(props) {\r\n  let style = props.length;\r\n  return (\r\n    <div className=\"bar\" style={{ height: style }} ></div>\r\n  )\r\n}\r\n\r\nexport default Bar;","import React from 'react';\nimport { Button, FormControl, FormControlLabel, Radio, RadioGroup } from '@material-ui/core';\n\nimport Bar from './components/Bar';\n\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    array: [],\n    algorithm: 'Bubble Sort'\n  }\n\n  handleStart = () => {\n    if (this.state.algorithm === 'Bubble Sort') {\n      this.bubbleSort(0, this.state.array.length - 1);\n    }\n    if (this.state.algorithm === 'Merge Sort') {\n      this.setState({\n        array: this.mergeSortRecursive(this.state.array),\n      });\n    }\n    if (this.state.algorithm === 'Quick Sort') {\n      this.quickSort();\n    }\n  }\n\n  recursionTest(counter) {\n    if (counter === 20) return;\n    this.recursionTest(++counter);\n\n    setTimeout(() => {\n      console.log(counter);\n    }, (20 - counter) * 100);\n  }\n\n  bubbleSort(i, length) {\n    setTimeout(() => {\n      if (this.state.array[i % length] > this.state.array[(i % length) + 1]) this.handleSwap(i % length, i % length + 1);\n      if (i < length * length) this.bubbleSort(++i, length);\n    }, 10);\n  }\n\n  mergeSort(array, depth) {\n    if (array.length === 1) return array;\n\n    //pointers\n    let l, m, r;\n    l = 0;\n    m = array.length / 2;\n    r = array.length;\n\n    let arrayA = array.slice(l, m);\n    let arrayB = array.slice(m, r);\n    let newArray;\n\n    arrayA = this.mergeSort(array.slice(0, m), ++depth);\n    arrayB = this.mergeSort(array.slice(m), ++depth);\n\n    setTimeout(() => {\n      console.log('%ccurrent depth: ' + depth, \"color: red\");\n      console.log('input array ' + arrayA + arrayB);\n\n      newArray = this.merge(arrayA, arrayB);\n\n      this.setState({\n        array: newArray,\n      });\n\n      return newArray;\n    }, (10 - depth) * 100);\n  }\n\n  merge(arrayA, arrayB) {\n    let arrayNew = [];\n    let A = 0;\n    let B = 0;\n\n    while (arrayA.length > 0 && arrayB.length > 0) {\n      if (arrayA[A] < arrayB[B]) {\n        arrayNew.push(arrayA.shift());\n      } else {\n        arrayNew.push(arrayB.shift());\n      }\n    }\n    if (arrayA.length !== 0) arrayNew = arrayNew.concat(arrayA);\n    if (arrayB.length !== 0) arrayNew = arrayNew.concat(arrayB);\n\n    console.log('final array ' + arrayNew);\n\n\n    return arrayNew;\n  }\n\n  mergeSortRecursive(array) {\n    if (array.length === 1) return array;\n\n    let middle = array.length / 2;\n    let arrayA, arrayB, arrayNew = [];\n\n    // pointers\n    let A = 0;\n    let B = 0;\n\n    arrayA = this.mergeSortRecursive(array.slice(0, middle));\n    arrayB = this.mergeSortRecursive(array.slice(middle, array.length));\n\n    while (A < arrayA.length && B < arrayB.length) {\n\n      if (arrayA[A] > arrayB[B]) {\n        arrayNew = arrayNew.concat(arrayB[B++]);\n      } else {\n        arrayNew = arrayNew.concat(arrayA[A++]);\n      }\n    }\n\n    if (A < arrayA.length) arrayNew = arrayNew.concat(arrayA.slice(A));\n    if (B < arrayB.length) arrayNew = arrayNew.concat(arrayB.slice(B));\n\n    this.setState({\n      array: arrayNew,\n    })\n\n    return arrayNew;\n  }\n\n  handleSwap = (indexA, indexB) => {\n    this.setState({\n      array: swap(this.state.array, indexA, indexB),\n    })\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      algorithm: event.target.value,\n    });\n  };\n\n  generateBars = () => {\n    let barsTemp = [];\n    for (let i = 0; i < 30; i++) {\n      barsTemp.push(Math.floor(Math.random() * 90) + 10)\n    }\n    this.setState({\n      array: barsTemp,\n    });\n    console.log('=== new bars ===');\n\n    console.log(barsTemp);\n  }\n\n  componentDidMount() {\n    this.generateBars();\n  }\n\n  render() {\n    let barsDiv = this.state.array.map((value, index) => <Bar key={index} length={value} />);\n\n    return (\n      <div className=\"App\">\n        <FormControl>\n          <RadioGroup aria-label=\"gender\" name=\"algorithms\" value={this.state.algorithm} onChange={this.handleChange}>\n            <FormControlLabel value=\"Bubble Sort\" control={<Radio />} label=\"Bubble Sort\" />\n            <FormControlLabel value=\"Merge Sort\" control={<Radio />} label=\"Merge Sort\" />\n            <FormControlLabel value=\"Quick Sort\" control={<Radio />} label=\"Quick Sort\" />\n          </RadioGroup>\n        </FormControl>\n\n        <Button variant=\"contained\" color=\"secondary\" onClick={() => this.generateBars()}>Reset</Button>\n        <Button variant=\"contained\" color=\"secondary\" onClick={() => this.handleStart()}>Start</Button>\n        <div className=\"container\">\n          {barsDiv}\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction swap(array, indexA, indexB) {\n  let temp = array[indexA];\n  array[indexA] = array[indexB];\n  array[indexB] = temp;\n  return array;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}